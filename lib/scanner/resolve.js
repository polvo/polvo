// Generated by CoffeeScript 1.6.3
var closest_mod_folder, config, debug, dirs, error, exts, fs, info, log, logger, mod_kinds, mod_manifests, path, plugin, plugins, resolve_file, resolve_id, resolve_index, resolve_module, warn, _i, _len;

path = require('path');

fs = require('fs');

config = require('../utils/config');

dirs = require('../utils/dirs');

plugins = require('../utils/plugins');

logger = require('../utils/logger')('scanner/resolve');

error = logger.error, warn = logger.warn, info = logger.info, debug = logger.debug, log = logger.log;

exts = [];

for (_i = 0, _len = plugins.length; _i < _len; _i++) {
  plugin = plugins[_i];
  if (plugin.output === 'js') {
    exts = exts.concat(plugin.exts);
  }
}

mod_kinds = 'node_modules components bower_components'.split(' ');

mod_manifests = 'package.json component.json bower.json'.split(' ');

module.exports = function(filepath, id) {
  var caller, file, index, kind, manifest, _j, _len1;
  id = id.replace(/\.js$/m, '');
  for (index = _j = 0, _len1 = mod_kinds.length; _j < _len1; index = ++_j) {
    kind = mod_kinds[index];
    manifest = mod_manifests[index];
    file = resolve_id(kind, manifest, filepath, id);
    if (file != null) {
      break;
    }
  }
  if (file != null) {
    return path.resolve(file);
  }
  caller = path.relative(dirs.pwd, filepath);
  error("Module '" + id + "' not found for '" + caller + "'");
  return id;
};

resolve_id = function(kind, manifest, filepath, id) {
  var file, idpath, seg, segs;
  if (id[0] !== '.') {
    return resolve_module(kind, manifest, filepath, id);
  }
  segs = [].concat(id.split('/'));
  idpath = path.dirname(filepath);
  while (segs.length) {
    seg = segs.shift();
    idpath = path.resolve(idpath, seg);
  }
  if ((file = resolve_file(idpath))) {
    return file;
  }
  if ((file = resolve_module(kind, manifest, idpath))) {
    return file;
  }
  return null;
};

resolve_file = function(filepath) {
  var ext, regexp, tmp, _j, _len1;
  for (_j = 0, _len1 = exts.length; _j < _len1; _j++) {
    ext = exts[_j];
    tmp = filepath;
    regexp = new RegExp("\." + ext + "$");
    tmp = tmp.replace(regexp, "");
    tmp += ext;
    if (fs.existsSync(tmp) && !fs.lstatSync(tmp).isDirectory()) {
      return tmp;
    }
  }
  return null;
};

resolve_index = function(dirpath) {
  var ext, filepath, tmp, _j, _len1;
  filepath = path.join(dirpath, 'index');
  for (_j = 0, _len1 = exts.length; _j < _len1; _j++) {
    ext = exts[_j];
    tmp = filepath;
    tmp += ext;
    if (fs.existsSync(tmp)) {
      return tmp;
    }
  }
  return null;
};

resolve_module = function(kind, manifest, filepath, id) {
  var file, idpath, json, location, main, map, mod, nmods, non_recurse, _ref;
  if (id == null) {
    id = '';
  }
  if (id === '') {
    non_recurse = true;
  }
  if (config.alias != null) {
    _ref = config.alias;
    for (map in _ref) {
      location = _ref[map];
      if (id.indexOf(map) === 0) {
        nmods = path.join(dirs.pwd, location);
        if (~id.indexOf('/')) {
          id = id.match(/\/(.+)/)[0];
        } else {
          id = '';
        }
        break;
      }
    }
  }
  if (nmods == null) {
    if (id === '') {
      nmods = filepath;
    } else {
      nmods = closest_mod_folder(kind, filepath);
    }
  }
  if (nmods == null) {
    return null;
  }
  mod = path.join(nmods, id);
  json = path.join(mod, manifest);
  if (json && fs.existsSync(json)) {
    main = (require(json)).main;
    if (main != null) {
      main = path.join(path.dirname(json), main);
      if ((file = resolve_file(main)) != null) {
        return file;
      }
      if ((file = resolve_index(main)) != null) {
        return file;
      }
    } else {
      if ((file = resolve_index(mod)) != null) {
        return file;
      }
    }
  }
  idpath = path.join(nmods, id);
  if ((file = resolve_file(idpath)) != null) {
    return file;
  }
  if ((file = resolve_index(idpath)) != null) {
    return file;
  }
  if (filepath !== '/' && non_recurse !== true) {
    return resolve_module(kind, manifest, path.join(filepath, '..'), id);
  }
};

closest_mod_folder = function(kind, filepath) {
  var nmods, tmp;
  if ((path.extname(filepath)) !== '') {
    if (!fs.lstatSync(filepath).isDirectory()) {
      tmp = path.dirname(filepath);
    }
  }
  tmp || (tmp = filepath);
  while (tmp !== '/') {
    nmods = path.join(tmp, kind);
    if (fs.existsSync(nmods)) {
      return nmods;
    } else {
      tmp = path.join(tmp, '..');
    }
  }
  return null;
};

/*
//@ sourceMappingURL=resolve.map
*/
